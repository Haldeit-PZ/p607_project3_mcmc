#!/usr/bin/env python

import numpy as np
import copy
import emcee
from tqdm import tqdm
import pylab as plt
from oneone_scalar_field.lattice import Lattice
from oneone_scalar_field.functions import *

from oscillator_codes.string_1D import String_1D

N = 10  # string nodes
m = 1.0  # mass
ang_freq = 0.01
separation = 1
step_size = 0.1  # step size for Metropolis-Hastings proposals

num_iterations = 5000
burn_in_fraction = 0.4


string1 = String_1D(N, m, ang_freq, separation, step_size)

print(f"Initial Equilibrium Positions: {string1.eq_pos}")
print(f"Initial Current Positions: {string1.curr_pos}")

samples, action_list = string1.run_mcmc(
    num_iterations=num_iterations, burn_in_fraction=burn_in_fraction
)

string1.plot_ring()

plt.figure(figsize=(8, 4))
plt.plot(action_list)
plt.title(f"Action overtime")
plt.xlabel("Iterations")
plt.ylabel("Action")
plt.show()


def log_probability(curr_pos, string):
    """
    Calculate the log-probability of the current string configuration.

    Parameters:
        curr_pos -- Array of node positions (sample)
        string -- Instance of the String_1D class

    Returns:
        log_prob -- Log-probability of the configuration
    """
    # Update the string instance with the current configuration
    string.curr_pos = curr_pos
    # Calculate action for the current configuration
    S = string.total_action()
    # Return log-probability, which is -S for Metropolis-Hastings
    return -S


n_walkers = 2 * N
n_params = N
# Initial positions for each walker, perturb around initial `curr_pos`
initial_positions = [
    string1.curr_pos + 0.01 * np.random.randn(N) for _ in range(n_walkers)
]
# Initialize the emcee sampler
sampler = emcee.EnsembleSampler(n_walkers, n_params, log_probability, args=[string1])
sampler_2 = emcee.EnsembleSampler(n_walkers, n_params, log_probability, args=[string1])
# Run the MCMC chain with `emcee`
emcee_samples = sampler.run_mcmc(initial_positions, num_iterations, progress=True)
emcee_samples_2 = sampler_2.run_mcmc(initial_positions, num_iterations, progress=True)

# Flatten the chain, discarding the burn-in samples
burn_in = int(num_iterations * burn_in_fraction)
emcee_flat_samples = sampler.get_chain(discard=burn_in, flat=True)
emcee_flat_samples_2 = sampler_2.get_chain(discard=burn_in, flat=True)


# Convert `String_1D` samples to a similar format
string_samples = np.array(samples)  # Convert list of samples to array

node_index = 1  # Choose a node to inspect

plt.hist(emcee_flat_samples[:, node_index], bins=30, alpha=0.5, label="emcee")
plt.hist(string_samples[:, node_index + 2], bins=30, alpha=0.5, label="String_1D")
plt.xlabel(f"Position of Node {node_index}")
plt.ylabel("Frequency")
plt.legend()
plt.title(f"Comparison of Position Distributions for Node {node_index}")
plt.show()

#-----------------------------------------2D------------------------------------------------------------#

# Lattice parameters
N = 16  # Number of lattice points in each dimension
d = 2  # Number of dimensions
default_k = 0.9  # Default coupling constant for nearest-neighbor interactions
default_lambda = 0.12  # Default coupling constant for the quartic term in the action

# Thermalization and recording parameters
thermalization_steps = int(1E3)  # Number of steps for thermalization (burn-in)
recording_steps = int(1E6)  # Number of steps for recording (post-thermalization)
save_interval = 100  # Save configuration every N steps during recording

# Choose sampling method
use_emcee = False  # Set to True to use emcee, False for Metropolis


# Function to run a single simulation
def run_simulation(N, d, k, lamb, thermalization_steps, recording_steps, save_interval, use_emcee=False):
    lattice = Lattice(N, d, k, lamb)

    # If using emcee
    if use_emcee:
        print(f"Running simulation with emcee (k={k}, lambda={lamb})...\n")
        n_walkers = 1000
        n_steps = 1000
        cfgs = lattice.run_emcee(n_walkers=n_walkers, n_steps=n_steps)

        # Calculate magnetization for each configuration in emcee samples
        magnetizations_recording = np.mean(cfgs.reshape(-1, n_walkers, N, N), axis=(1, 2, 3))
        magnetizations_thermalization = np.array([])  # Not applicable with emcee
        acceptance_rate = None  # emcee doesn't use acceptance rate in the same way

    # If using hand-coded Metropolis algorithm
    else:
        print(f"Running Metropolis simulation with k={k}, lambda={lamb}...\n")
        cfgs = []
        magnetizations_thermalization = []  # Magnetization during thermalization
        magnetizations_recording = []  # Magnetization after thermalization
        n_accepted = 0  # Counter for accepted moves

        for i in tqdm(range(thermalization_steps + recording_steps)):
            accepted = lattice.metropolis()
            n_accepted += accepted

            # Record magnetization during thermalization
            if i < thermalization_steps:
                magnetizations_thermalization.append(lattice.phi.mean())

            # Start recording after thermalization
            if i >= thermalization_steps:
                if (i - thermalization_steps) % save_interval == 0:
                    cfgs.append(copy.deepcopy(lattice.phi))
                    magnetizations_recording.append(lattice.phi.mean())

        cfgs = np.array(cfgs)
        magnetizations_thermalization = np.array(magnetizations_thermalization)
        magnetizations_recording = np.array(magnetizations_recording)
        acceptance_rate = n_accepted / (thermalization_steps + recording_steps)

    return cfgs, magnetizations_thermalization, magnetizations_recording, acceptance_rate


# Run the default simulation
cfgs, magnetizations_thermalization, magnetizations_recording, acceptance_rate = run_simulation(
    N, d, default_k, default_lambda, thermalization_steps, recording_steps, save_interval, use_emcee=use_emcee
)

if acceptance_rate is not None:
    print("\nAcceptance rate:", acceptance_rate)

# OBSERVABLES
print("\nCalculating Observables...\n")
mag_mean, mag_err = get_mag(cfgs)
print("M =", mag_mean, "+/-", mag_err)

mag_abs_mean, mag_abs_err = get_abs_mag(cfgs)
print("|M| =", mag_abs_mean, "+/-", mag_abs_err)

chi2_mean, chi2_err = get_chi2(cfgs)
print("Chi^2 =", chi2_mean, "+/-", chi2_err)

# Magnetization Plot (During Thermalization) - Only applicable for Metropolis method
if not use_emcee:
    plt.figure(figsize=(8, 6))
    plt.plot(range(len(magnetizations_thermalization)), magnetizations_thermalization, label="Magnetization")
    plt.xlabel("Steps (During Thermalization)")
    plt.ylabel("Magnetization")
    plt.title("Magnetization During Thermalization")
    plt.legend()
    plt.grid(True)
    plt.show()

# Magnetization Plot (Post-Thermalization)
plt.figure(figsize=(8, 6))
plt.plot(range(len(magnetizations_recording)), magnetizations_recording, label="Magnetization")
plt.xlabel("Steps (Post-Thermalization)")
plt.ylabel("Magnetization")
plt.title("Magnetization After Thermalization")
plt.legend()
plt.grid(True)
plt.show()

# PROPAGATOR
propagator = get_propagator(cfgs)
distances = propagator[:, 0]
prop_means = propagator[:, 1]
prop_errors = propagator[:, 2]

plt.figure(figsize=(8, 6))
plt.errorbar(distances, prop_means, yerr=prop_errors, fmt='o', capsize=4,
             label=f"Propagator (k={default_k}, lambda={default_lambda})")
plt.xlabel("Distance")
plt.ylabel("Propagator")
plt.title("Propagator vs Distance")
plt.legend()
plt.grid(True)
plt.show()

# COMPARISON: Propagator for Different k and lambda Values
k_values = [0.5, 0.9, 1.2]
lambda_values = [0.05, 0.12, 0.5]

plt.figure(figsize=(10, 8))
for k in k_values:
    for lamb in lambda_values:
        cfgs, _, _, _ = run_simulation(N, d, k, lamb, thermalization_steps, recording_steps, save_interval,
                                       use_emcee=use_emcee)
        propagator = get_propagator(cfgs)
        distances = propagator[:, 0]
        prop_means = propagator[:, 1]
        plt.plot(distances, prop_means, label=f"k={k}, lambda={lamb}")

plt.xlabel("Distance")
plt.ylabel("Propagator")
plt.title("Propagator Comparison for Varying k and lambda")
plt.legend()
plt.grid(True)
plt.show()
